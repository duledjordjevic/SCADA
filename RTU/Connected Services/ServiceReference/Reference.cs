//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RTU.ServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IRealTimeDriverService", CallbackContract=typeof(RTU.ServiceReference.IRealTimeDriverServiceCallback))]
    public interface IRealTimeDriverService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRealTimeDriverService/RegisterRTU", ReplyAction="http://tempuri.org/IRealTimeDriverService/RegisterRTUResponse")]
        bool RegisterRTU(string address);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRealTimeDriverService/RegisterRTU", ReplyAction="http://tempuri.org/IRealTimeDriverService/RegisterRTUResponse")]
        System.Threading.Tasks.Task<bool> RegisterRTUAsync(string address);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRealTimeDriverService/SendData", ReplyAction="http://tempuri.org/IRealTimeDriverService/SendDataResponse")]
        void SendData(string address, string data, byte[] signature);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRealTimeDriverService/SendData", ReplyAction="http://tempuri.org/IRealTimeDriverService/SendDataResponse")]
        System.Threading.Tasks.Task SendDataAsync(string address, string data, byte[] signature);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRealTimeDriverServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IRealTimeDriverService/MessageArrived")]
        void MessageArrived(string message);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRealTimeDriverServiceChannel : RTU.ServiceReference.IRealTimeDriverService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RealTimeDriverServiceClient : System.ServiceModel.DuplexClientBase<RTU.ServiceReference.IRealTimeDriverService>, RTU.ServiceReference.IRealTimeDriverService {
        
        public RealTimeDriverServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public RealTimeDriverServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public RealTimeDriverServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public RealTimeDriverServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public RealTimeDriverServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public bool RegisterRTU(string address) {
            return base.Channel.RegisterRTU(address);
        }
        
        public System.Threading.Tasks.Task<bool> RegisterRTUAsync(string address) {
            return base.Channel.RegisterRTUAsync(address);
        }
        
        public void SendData(string address, string data, byte[] signature) {
            base.Channel.SendData(address, data, signature);
        }
        
        public System.Threading.Tasks.Task SendDataAsync(string address, string data, byte[] signature) {
            return base.Channel.SendDataAsync(address, data, signature);
        }
    }
}
