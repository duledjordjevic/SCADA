//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ReportManager.ReportServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ActivatedAlarm", Namespace="http://schemas.datacontract.org/2004/07/Core.Model")]
    [System.SerializableAttribute()]
    public partial class ActivatedAlarm : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private CommonLibrary.Model.Alarm AlarmField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime TriggeredOnField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public CommonLibrary.Model.Alarm Alarm {
            get {
                return this.AlarmField;
            }
            set {
                if ((object.ReferenceEquals(this.AlarmField, value) != true)) {
                    this.AlarmField = value;
                    this.RaisePropertyChanged("Alarm");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime TriggeredOn {
            get {
                return this.TriggeredOnField;
            }
            set {
                if ((this.TriggeredOnField.Equals(value) != true)) {
                    this.TriggeredOnField = value;
                    this.RaisePropertyChanged("TriggeredOn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Value {
            get {
                return this.ValueField;
            }
            set {
                if ((this.ValueField.Equals(value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TagEntity", Namespace="http://schemas.datacontract.org/2004/07/Core.Model")]
    [System.SerializableAttribute()]
    public partial class TagEntity : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TagNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime TimestampField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TagName {
            get {
                return this.TagNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TagNameField, value) != true)) {
                    this.TagNameField = value;
                    this.RaisePropertyChanged("TagName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Timestamp {
            get {
                return this.TimestampField;
            }
            set {
                if ((this.TimestampField.Equals(value) != true)) {
                    this.TimestampField = value;
                    this.RaisePropertyChanged("Timestamp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.TypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeField, value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Value {
            get {
                return this.ValueField;
            }
            set {
                if ((this.ValueField.Equals(value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ReportServiceReference.IReportService", CallbackContract=typeof(ReportManager.ReportServiceReference.IReportServiceCallback))]
    public interface IReportService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/GetAlarmsByPeriod", ReplyAction="http://tempuri.org/IReportService/GetAlarmsByPeriodResponse")]
        ReportManager.ReportServiceReference.ActivatedAlarm[] GetAlarmsByPeriod(System.DateTime startTime, System.DateTime endTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/GetAlarmsByPeriod", ReplyAction="http://tempuri.org/IReportService/GetAlarmsByPeriodResponse")]
        System.Threading.Tasks.Task<ReportManager.ReportServiceReference.ActivatedAlarm[]> GetAlarmsByPeriodAsync(System.DateTime startTime, System.DateTime endTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/GetAlarmsByPriority", ReplyAction="http://tempuri.org/IReportService/GetAlarmsByPriorityResponse")]
        ReportManager.ReportServiceReference.ActivatedAlarm[] GetAlarmsByPriority(int priority);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/GetAlarmsByPriority", ReplyAction="http://tempuri.org/IReportService/GetAlarmsByPriorityResponse")]
        System.Threading.Tasks.Task<ReportManager.ReportServiceReference.ActivatedAlarm[]> GetAlarmsByPriorityAsync(int priority);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/GetTagValuesByPeriod", ReplyAction="http://tempuri.org/IReportService/GetTagValuesByPeriodResponse")]
        ReportManager.ReportServiceReference.TagEntity[] GetTagValuesByPeriod(System.DateTime startTime, System.DateTime endTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/GetTagValuesByPeriod", ReplyAction="http://tempuri.org/IReportService/GetTagValuesByPeriodResponse")]
        System.Threading.Tasks.Task<ReportManager.ReportServiceReference.TagEntity[]> GetTagValuesByPeriodAsync(System.DateTime startTime, System.DateTime endTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/GetLastAITagValues", ReplyAction="http://tempuri.org/IReportService/GetLastAITagValuesResponse")]
        ReportManager.ReportServiceReference.TagEntity[] GetLastAITagValues();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/GetLastAITagValues", ReplyAction="http://tempuri.org/IReportService/GetLastAITagValuesResponse")]
        System.Threading.Tasks.Task<ReportManager.ReportServiceReference.TagEntity[]> GetLastAITagValuesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/GetLastDITagValues", ReplyAction="http://tempuri.org/IReportService/GetLastDITagValuesResponse")]
        ReportManager.ReportServiceReference.TagEntity[] GetLastDITagValues();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/GetLastDITagValues", ReplyAction="http://tempuri.org/IReportService/GetLastDITagValuesResponse")]
        System.Threading.Tasks.Task<ReportManager.ReportServiceReference.TagEntity[]> GetLastDITagValuesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/GetTagValuesByName", ReplyAction="http://tempuri.org/IReportService/GetTagValuesByNameResponse")]
        ReportManager.ReportServiceReference.TagEntity[] GetTagValuesByName(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/GetTagValuesByName", ReplyAction="http://tempuri.org/IReportService/GetTagValuesByNameResponse")]
        System.Threading.Tasks.Task<ReportManager.ReportServiceReference.TagEntity[]> GetTagValuesByNameAsync(string name);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IReportServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IReportService/MessageArrived")]
        void MessageArrived(string message);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IReportServiceChannel : ReportManager.ReportServiceReference.IReportService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ReportServiceClient : System.ServiceModel.DuplexClientBase<ReportManager.ReportServiceReference.IReportService>, ReportManager.ReportServiceReference.IReportService {
        
        public ReportServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ReportServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ReportServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ReportServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ReportServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public ReportManager.ReportServiceReference.ActivatedAlarm[] GetAlarmsByPeriod(System.DateTime startTime, System.DateTime endTime) {
            return base.Channel.GetAlarmsByPeriod(startTime, endTime);
        }
        
        public System.Threading.Tasks.Task<ReportManager.ReportServiceReference.ActivatedAlarm[]> GetAlarmsByPeriodAsync(System.DateTime startTime, System.DateTime endTime) {
            return base.Channel.GetAlarmsByPeriodAsync(startTime, endTime);
        }
        
        public ReportManager.ReportServiceReference.ActivatedAlarm[] GetAlarmsByPriority(int priority) {
            return base.Channel.GetAlarmsByPriority(priority);
        }
        
        public System.Threading.Tasks.Task<ReportManager.ReportServiceReference.ActivatedAlarm[]> GetAlarmsByPriorityAsync(int priority) {
            return base.Channel.GetAlarmsByPriorityAsync(priority);
        }
        
        public ReportManager.ReportServiceReference.TagEntity[] GetTagValuesByPeriod(System.DateTime startTime, System.DateTime endTime) {
            return base.Channel.GetTagValuesByPeriod(startTime, endTime);
        }
        
        public System.Threading.Tasks.Task<ReportManager.ReportServiceReference.TagEntity[]> GetTagValuesByPeriodAsync(System.DateTime startTime, System.DateTime endTime) {
            return base.Channel.GetTagValuesByPeriodAsync(startTime, endTime);
        }
        
        public ReportManager.ReportServiceReference.TagEntity[] GetLastAITagValues() {
            return base.Channel.GetLastAITagValues();
        }
        
        public System.Threading.Tasks.Task<ReportManager.ReportServiceReference.TagEntity[]> GetLastAITagValuesAsync() {
            return base.Channel.GetLastAITagValuesAsync();
        }
        
        public ReportManager.ReportServiceReference.TagEntity[] GetLastDITagValues() {
            return base.Channel.GetLastDITagValues();
        }
        
        public System.Threading.Tasks.Task<ReportManager.ReportServiceReference.TagEntity[]> GetLastDITagValuesAsync() {
            return base.Channel.GetLastDITagValuesAsync();
        }
        
        public ReportManager.ReportServiceReference.TagEntity[] GetTagValuesByName(string name) {
            return base.Channel.GetTagValuesByName(name);
        }
        
        public System.Threading.Tasks.Task<ReportManager.ReportServiceReference.TagEntity[]> GetTagValuesByNameAsync(string name) {
            return base.Channel.GetTagValuesByNameAsync(name);
        }
    }
}
